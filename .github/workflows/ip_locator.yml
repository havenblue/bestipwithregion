name: IP地址归属地查询

on:
  # 定时触发，每天运行一次
  schedule:
    - cron: '0 0 * * *'
  # 允许手动触发
  workflow_dispatch:

jobs:
  check-ip-locations:
    runs-on: ubuntu-latest
    steps:
      # 检出代码仓库
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 设置Node.js环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 运行IP地址查询脚本（内嵌JavaScript代码）
      - name: Run IP locator script
        run: |
          node << 'EOF'
          const https = require('https');
          const fs = require('fs');
          const path = require('path');
          
          // 从URL获取IP列表
          function getIpsFromUrl(url) {
            return new Promise((resolve, reject) => {
              https.get(url, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                  data += chunk;
                });
                
                res.on('end', () => {
                  resolve(data.trim().split('\n'));
                });
              }).on('error', (e) => {
                console.error(`获取IP列表失败: ${e.message}`);
                reject(e);
              });
            });
          }
          
          // 验证IP地址格式
          function isValidIp(ip) {
            const pattern = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
            return pattern.test(ip);
          }
          
          // 延迟函数，用于控制请求频率
          function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }
          
          // 主查询函数 - 使用ip-api.com
          async function queryWithIpApi(ip) {
            return new Promise((resolve) => {
              try {
                const options = {
                  hostname: 'ip-api.com',
                  path: `/json/${ip}?fields=status,countryCode,message`,
                  headers: {
                    'User-Agent': 'IPLocationChecker/1.0 (Node.js)'
                  }
                };
                
                console.log(`Debug: 发送ip-api.com查询请求 for ${ip}`);
                
                const req = https.get(options, (res) => {
                  let data = '';
                  
                  res.on('data', (chunk) => { data += chunk; });
                  
                  res.on('end', () => {
                    try {
                      console.log(`Debug: ip-api.com响应数据 for ${ip}: ${data}`);
                      const result = JSON.parse(data);
                      
                      if (result && result.status && result.status.toLowerCase() === 'success' && result.countryCode) {
                        console.log(`Debug: ip-api.com查询成功: ${ip} -> ${result.countryCode}`);
                        resolve({ success: true, countryCode: result.countryCode });
                      } else {
                        const errorMessage = result?.message || '未知错误';
                        console.log(`Debug: ip-api.com查询失败，状态: ${result?.status || 'undefined'}，错误: ${errorMessage}`);
                        resolve({ success: false, error: errorMessage });
                      }
                    } catch (error) {
                      console.error(`解析ip-api.com响应失败: ${error.message}`);
                      resolve({ success: false, error: error.message });
                    }
                  });
                }).on('error', (e) => {
                  console.error(`ip-api.com请求错误: ${e.message}`);
                  resolve({ success: false, error: e.message });
                });
              } catch (error) {
                console.error(`ip-api.com调用异常: ${error.message}`);
                resolve({ success: false, error: error.message });
              }
            });
          }
          
          // 备用查询函数 - 使用ipinfo.io
          async function queryWithIpInfo(ip) {
            return new Promise((resolve) => {
              try {
                // 使用ipinfo.io的公共API，每天限制5000次请求
                const options = {
                  hostname: 'ipinfo.io',
                  path: `/${ip}/country`,
                  headers: {
                    'User-Agent': 'IPLocationChecker/1.0 (Node.js)'
                  }
                };
                
                console.log(`Debug: 发送ipinfo.io备用查询请求 for ${ip}`);
                
                const req = https.get(options, (res) => {
                  let data = '';
                  
                  res.on('data', (chunk) => { data += chunk; });
                  
                  res.on('end', () => {
                    try {
                      const countryCode = data.trim();
                      if (countryCode && countryCode.length === 2 && /^[A-Z]{2}$/.test(countryCode)) {
                        console.log(`Debug: ipinfo.io备用查询成功: ${ip} -> ${countryCode}`);
                        resolve({ success: true, countryCode });
                      } else {
                        console.log(`Debug: ipinfo.io备用查询失败，返回数据: ${data}`);
                        resolve({ success: false, error: '无效的国家代码' });
                      }
                    } catch (error) {
                      console.error(`解析ipinfo.io响应失败: ${error.message}`);
                      resolve({ success: false, error: error.message });
                    }
                  });
                }).on('error', (e) => {
                  console.error(`ipinfo.io请求错误: ${e.message}`);
                  resolve({ success: false, error: e.message });
                });
              } catch (error) {
                console.error(`ipinfo.io调用异常: ${error.message}`);
                resolve({ success: false, error: error.message });
              }
            });
          }
          
          // 查询IP归属地（带重试和备用API）
          async function getIpLocation(ip) {
            try {
              // 添加随机延迟(100-300ms)，避免请求频率过高
              const randomDelay = Math.floor(Math.random() * 200) + 100;
              console.log(`Debug: IP ${ip} 查询前延迟 ${randomDelay}ms`);
              await delay(randomDelay);
              
              // 首先尝试使用ip-api.com
              let result = await queryWithIpApi(ip);
              
              // 如果失败，尝试使用备用API
              if (!result.success) {
                console.log(`Debug: ${ip} 主API查询失败，尝试备用API...`);
                await delay(100); // 再次延迟
                result = await queryWithIpInfo(ip);
              }
              
              return result.success ? result.countryCode : 'unknown';
            } catch (error) {
              console.error(`查询IP ${ip} 归属地时发生异常: ${error.message}`);
              return 'unknown';
            }
          }
          
          // 主函数
          async function main() {
            try {
              // 从环境变量或默认值获取URL
              const url = process.env.IP_LIST_URL || 'https://raw.githubusercontent.com/ymyuuu/IPDB/refs/heads/main/BestCF/bestcfv4.txt';
              console.log(`Debug: 使用的IP列表URL: ${url}`);
               
              // 获取IP列表
              const ips = await getIpsFromUrl(url);
              if (!ips || ips.length === 0) {
                console.log('没有获取到IP地址');
                return;
              }
               
              console.log(`Debug: 成功获取到 ${ips.length} 个IP地址`);
               
              // 创建结果列表
              const results = [];
               
              // 逐个处理IP地址
              for (const ip of ips) {
                const trimmedIp = ip.trim();
                if (trimmedIp && isValidIp(trimmedIp)) {
                  const countryCode = await getIpLocation(trimmedIp);
                  results.push(`${trimmedIp}#${countryCode}`);
                  console.log(`处理IP: ${trimmedIp} -> ${countryCode}`);
                } else if (trimmedIp) {  // 跳过空行但记录无效IP
                  console.log(`无效的IP地址: ${trimmedIp}`);
                }
              }
               
              // 写入结果到ip.txt文件
              fs.writeFileSync('ip.txt', results.join('\n'), { encoding: 'utf-8' });
               
              // 统计成功和失败的数量
              const successCount = results.filter(line => !line.endsWith('#unknown')).length;
              const failCount = results.filter(line => line.endsWith('#unknown')).length;
               
              console.log(`共处理 ${results.length} 个有效IP地址，其中成功: ${successCount} 个，失败: ${failCount} 个，结果已保存到ip.txt`);
            } catch (error) {
              console.error(`执行过程中发生错误: ${error.message}`);
              process.exit(1);
            }
          }
          
          // 执行主函数
          main();
          EOF

      # 可选：将结果提交回仓库
      - name: Commit and push results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add ip.txt
          # 检查是否有更改
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update IP location data"
            git push
          fi
        # 仅在需要自动提交结果时启用此步骤
        # 注意：需要确保GitHub Actions有权限推送代码
        # 可以通过在仓库设置中配置适当的权限来实现
